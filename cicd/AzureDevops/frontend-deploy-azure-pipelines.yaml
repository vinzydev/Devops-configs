# Azure DevOps Pipeline for Frontend: Build, SonarQube, Docker, ACR Push, Helm Deploy

trigger:
  branches:
    include:
      - main
      - develop

pr:
  branches:
    include:
      - main
      - develop

variables:
  azureSubscription: 'Your-Azure-Service-Connection-Name' # Service connection name in Azure DevOps
  azureResourceGroup: 'your-resource-group-name'
  azureAksCluster: 'your-aks-cluster-name'
  azureContainerRegistry: 'youracr.azurecr.io'
  helmReleaseName: 'your-helm-release-name'
  helmChartPath: 'path/to/your/chart'
  imageName: 'your-frontend-image'
  sonarQubeServiceEndpoint: 'Your-SonarQube-Service-Connection'
  environment: '$(Build.SourceBranchName)' # Use branch name for environment selection

stages:
- stage: Build
  displayName: Build and Analyze
  jobs:
  - job: Build
    displayName: Build, SonarQube Analysis, and Quality Gate
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: npm run build
      displayName: 'Build frontend'

    # SonarQube Analysis
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: '$(sonarQubeServiceEndpoint)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'your-sonarqube-project-key'
        cliProjectName: 'your-sonarqube-project-name'
        cliSources: '.'

    - script: |
        sonar-scanner \
          -Dsonar.projectKey=your-sonarqube-project-key \
          -Dsonar.sources=. \
          -Dsonar.host.url=$(SONARQUBE_HOST_URL) \
          -Dsonar.login=$(SONARQUBE_TOKEN)
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarQube Quality Gate'

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Check Quality Gate Status'
      # This will fail the build if the quality gate fails

- stage: DockerBuildPush
  displayName: Build and Push Docker Image
  dependsOn: Build
  jobs:
  - job: Docker
    displayName: Docker Build and Push
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: build
        repository: $(azureContainerRegistry)/$(imageName)
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        command: push
        repository: $(azureContainerRegistry)/$(imageName)
        tags: |
          $(Build.BuildId)

- stage: Deploy
  displayName: Deploy to AKS using Helm
  dependsOn: DockerBuildPush
  jobs:
  - deployment: DeployHelm
    displayName: Helm Upgrade/Install
    environment: "$[eq(variables['Build.SourceBranch'], 'refs/heads/main') ? 'prod' : 'non-prod']"
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Login to Azure and get AKS credentials'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group $(azureResourceGroup) --name $(azureAksCluster) --overwrite-existing

          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'v3.7.0'

          - script: |
              helm upgrade --install $(helmReleaseName) $(helmChartPath) \
                --set image.repository=$(azureContainerRegistry)/$(imageName) \
                --set image.tag=$(Build.BuildId) \
                --namespace $([ "$(Build.SourceBranchName)" = "main" ] && echo "prod" || echo "default") \
                --wait
            displayName: 'Deploy to AKS using Helm'

# Notes:
# - Replace all placeholder values (service connection names, resource group, etc.) with your actual values.
# - The SonarQube tasks require a SonarQube service connection in Azure DevOps.
# - The pipeline will stop if SonarQube Quality Gate fails.
# - The deployment environment is selected based on the branch (main = prod, others = non-prod).
# - All secrets and service connections must be configured in Azure DevOps project settings.